{"version":3,"file":"angular2TextMask.d.ts","sources":["angular2TextMask.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, OnChanges, Provider, SimpleChanges, RendererFactory2 } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport * as textMask from 'text-mask-core';\nexport declare const conformToMask: typeof textMask.conformToMask;\nexport declare class TextMaskConfig {\n    mask: Array<string | RegExp> | ((raw: string) => Array<string | RegExp>) | false;\n    guide?: boolean;\n    placeholderChar?: string;\n    pipe?: (conformedValue: string, config: TextMaskConfig) => false | string | object;\n    keepCharPositions?: boolean;\n    showMask?: boolean;\n}\nexport declare const MASKEDINPUT_VALUE_ACCESSOR: Provider;\nexport declare class MaskedInputDirective implements ControlValueAccessor, OnChanges {\n    private _elementRef;\n    private _compositionMode;\n    textMaskConfig: TextMaskConfig;\n    private textMaskInputElement;\n    private inputElement;\n    private _renderer;\n    /** Whether the user is creating a composition string (IME events). */\n    private _composing;\n    constructor(rendererFactory: RendererFactory2, _elementRef: ElementRef, _compositionMode: boolean);\n    onChange: (_: any) => void;\n    onTouched: () => void;\n    ngOnChanges(changes: SimpleChanges): void;\n    writeValue(value: any): void;\n    registerOnChange(fn: (_: any) => void): void;\n    registerOnTouched(fn: () => void): void;\n    setDisabledState(isDisabled: boolean): void;\n    _handleInput(value: any): void;\n    _setupMask(create?: boolean): void;\n    _compositionStart(): void;\n    _compositionEnd(value: any): void;\n}\nexport declare class TextMaskModule {\n}\n"]}